# Copyright 2020-2021 David Sherret. All rights reserved. MIT license.
# Made with the help of:
# https://github.com/denoland/deno/blob/main/.github/workflows/ci.yml

name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: macOS-latest
            kind: test_release
          - os: windows-latest
            kind: test_release
          - os: ubuntu-latest
            kind: test_release
          - os: ubuntu-latest
            kind: test_debug

    env:
      CARGO_INCREMENTAL: 0 # disabled to reduce ./target size and generally it's slower enabled
      RUST_BACKTRACE: full

    outputs:
      LINUX_ZIP_CHECKSUM: ${{steps.linux_pre_release.outputs.ZIP_CHECKSUM}}
      MAC_ZIP_CHECKSUM: ${{steps.mac_pre_release.outputs.ZIP_CHECKSUM}}
      WINDOWS_ZIP_CHECKSUM: ${{steps.windows_pre_release.outputs.ZIP_CHECKSUM}}
      WINDOWS_INSTALLER_CHECKSUM: ${{steps.windows_pre_release.outputs.INSTALLER_CHECKSUM}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      # remember to update the publish script if changing the version
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.58.0
        override: true
    - name: Install wasm32 target
      run: rustup target add wasm32-unknown-unknown

    # CACHE SETUP
    - uses: Swatinem/rust-cache@v1

    # BUILD
    - name: Build test plugins
      run: |
        cargo build --manifest-path=crates/test-plugin/Cargo.toml --release --target=wasm32-unknown-unknown
        cargo build --manifest-path=crates/test-process-plugin/Cargo.toml --release --locked

    - name: Build debug
      if: matrix.config.kind == 'test_debug'
      run: cargo build --locked --all-features
    - name: Build release
      if: matrix.config.kind == 'test_release'
      run: cargo build --locked --all-features --release

    # TEST
    - name: Test debug
      if: matrix.config.kind == 'test_debug'
      run: cargo test --locked --all-features
    - name: Test release
      if: matrix.config.kind == 'test_release'
      run: cargo test --locked --all-features --release

    # INSTALLER
    - name: Create installer (Windows)
      uses: joncloud/makensis-action@v2.0
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        script-file: ${{ github.workspace }}/deployment/installer/dprint-installer.nsi

    # PRE-RELEASE
    - name: Pre-release (Linux)
      id: linux_pre_release
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/release
          zip -r dprint-x86_64-unknown-linux-gnu.zip dprint
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-x86_64-unknown-linux-gnu.zip | awk '{print $1}')"
    - name: Pre-release (Mac)
      id: mac_pre_release
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/release
          zip -r dprint-x86_64-apple-darwin.zip dprint
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-x86_64-apple-darwin.zip | awk '{print $1}')"
    - name: Pre-release (Windows)
      id: windows_pre_release
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/dprint.exe -DestinationPath target/release/dprint-x86_64-pc-windows-msvc.zip
          mv deployment/installer/dprint-x86_64-pc-windows-msvc-installer.exe target/release/dprint-x86_64-pc-windows-msvc-installer.exe
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 target/release/dprint-x86_64-pc-windows-msvc.zip | awk '{print $1}')"
          echo "::set-output name=INSTALLER_CHECKSUM::$(shasum -a 256 target/release/dprint-x86_64-pc-windows-msvc-installer.exe | awk '{print $1}')"

    # UPLOAD ARTIFACTS
    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: linux-artifacts
        path: target/release/dprint-x86_64-unknown-linux-gnu.zip
    - name: Upload Artifacts (Mac)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: mac-artifacts
        path: target/release/dprint-x86_64-apple-darwin.zip
    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: windows-artifacts
        path: |
          target/release/dprint-x86_64-pc-windows-msvc.zip
          target/release/dprint-x86_64-pc-windows-msvc-installer.exe

    # TEST INSTALLERS
    - name: Test shell installer
      run: |
        cd website/assets
        chmod +x install.sh
        ./install.sh
    - name: Test powershell installer (Windows)
      if: startsWith(matrix.config.os, 'windows')
      shell: pwsh
      run: |
        cd website/assets
        ./install.ps1

  draft_release:
    name: draft_release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: Get tag version
      id: get_tag_version
      run: echo ::set-output name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Output checksums
      run: |
        echo "Linux Zip: ${{needs.build.outputs.LINUX_ZIP_CHECKSUM}}"
        echo "Mac Zip: ${{needs.build.outputs.MAC_ZIP_CHECKSUM}}"
        echo "Windows Zip: ${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}}"
        echo "Windows Installer: ${{needs.build.outputs.WINDOWS_INSTALLER_CHECKSUM}}"

    - name: Create extra release files
      # .tar.gz file is for homebrew binary release... no clue why I couldn't do this above when creating the mac artifacts above
      run: |
        cd mac-artifacts
        unzip -o dprint-x86_64-apple-darwin.zip
        tar -czf dprint-x86_64-apple-darwin.tar.gz dprint

    - uses: finnp/create-file-action@1.0.0
      env:
        FILE_NAME: bvm.json
        FILE_DATA: |
          {
            "schemaVersion": 1,
            "name": "dprint",
            "owner": "dprint",
            "version": "${{steps.get_tag_version.outputs.TAG_VERSION}}",
            "description": "Pluggable and configurable code formatting platform written in Rust.",
            "windows-x86_64": {
              "path": "https://github.com/dprint/dprint/releases/download/${{steps.get_tag_version.outputs.TAG_VERSION}}/dprint-x86_64-pc-windows-msvc.zip",
              "type": "zip",
              "checksum": "${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}}",
              "commands": [{
                "name": "dprint",
                "path": "dprint.exe"
              }]
            },
            "linux-x86_64": {
              "path": "https://github.com/dprint/dprint/releases/download/${{steps.get_tag_version.outputs.TAG_VERSION}}/dprint-x86_64-unknown-linux-gnu.zip",
              "type": "zip",
              "checksum": "${{needs.build.outputs.LINUX_ZIP_CHECKSUM}}",
              "commands": [{
                "name": "dprint",
                "path": "dprint"
              }]
            },
            "darwin-x86_64": {
              "path": "https://github.com/dprint/dprint/releases/download/${{steps.get_tag_version.outputs.TAG_VERSION}}/dprint-x86_64-apple-darwin.zip",
              "type": "zip",
              "checksum": "${{needs.build.outputs.MAC_ZIP_CHECKSUM}}",
              "commands": [{
                "name": "dprint",
                "path": "dprint"
              }]
            }
          }

    - name: Create SHASUMS256.txt file
      run: |
        echo "${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}} dprint-x86_64-pc-windows-msvc.zip" > SHASUMS256.txt
        echo "${{needs.build.outputs.LINUX_ZIP_CHECKSUM}} dprint-x86_64-unknown-linux-gnu.zip" >> SHASUMS256.txt
        echo "${{needs.build.outputs.MAC_ZIP_CHECKSUM}} dprint-x86_64-apple-darwin.zip" >> SHASUMS256.txt
        echo "${{needs.build.outputs.WINDOWS_INSTALLER_CHECKSUM}} dprint-x86_64-pc-windows-msvc-installer.exe" >> SHASUMS256.txt

    - name: Get bvm.json checksum
      id: get_bvm_checksum
      run: echo "::set-output name=CHECKSUM::$(shasum -a 256 bvm.json | awk '{print $1}')"

    - name: Draft release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          windows-artifacts/dprint-x86_64-pc-windows-msvc.zip
          windows-artifacts/dprint-x86_64-pc-windows-msvc-installer.exe
          linux-artifacts/dprint-x86_64-unknown-linux-gnu.zip
          mac-artifacts/dprint-x86_64-apple-darwin.zip
          mac-artifacts/dprint-x86_64-apple-darwin.tar.gz
          bvm.json
          SHASUMS256.txt
        body: |
          ## Changes

          * TODO

          ## Install

          Linux/Mac/WSL:

          ```bash
          curl -fsSL https://dprint.dev/install.sh | sh
          ```

          Windows (use Powershell or installer below):

          ```powershell
          iwr https://dprint.dev/install.ps1 -useb | iex
          ```

          [Homebrew](https://brew.sh/) (Mac):

          ```bash
          brew install dprint
          ```

          Cargo (builds and installs the [cargo package](https://crates.io/crates/dprint) from source):

          ```bash
          cargo install dprint
          ```

          [npm](https://www.npmjs.com/):

          ```bash
          npm install dprint
          npx dprint help

          # or install globally
          npm install -g dprint
          dprint help
          ```

          [bvm](https://github.com/dsherret/bvm) (Experimental):

          ```bash
          bvm install https://bvm.land/dprint/${{steps.get_tag_version.outputs.TAG_VERSION}}.json

          # or install via the registry
          bvm registry add https://bvm.land/dprint/registry.json
          bvm install dprint
          ```

          Or project specific in `bvm.json`:

          ```json
          {
            "dependencies": [
              "https://bvm.land/dprint/${{steps.get_tag_version.outputs.TAG_VERSION}}.json@${{steps.get_bvm_checksum.outputs.CHECKSUM}}"
            ]
          }
          ```

          ## Checksums

          |Artifact|SHA-256 Checksum|
          |:--|:--|
          |Linux Zip|${{needs.build.outputs.LINUX_ZIP_CHECKSUM}}|
          |Mac Zip|${{needs.build.outputs.MAC_ZIP_CHECKSUM}}|
          |Windows Zip|${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}}|
          |Windows Installer|${{needs.build.outputs.WINDOWS_INSTALLER_CHECKSUM}}|
        draft: true
