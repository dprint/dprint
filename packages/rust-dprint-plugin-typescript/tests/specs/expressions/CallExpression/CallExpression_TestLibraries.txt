~~ lineWidth: 40 ~~
== should not go multiline when going above line width for a describe ==
describe("testing this out with a long string", () => {
    // etc...
});

[expect]
describe("testing this out with a long string", () => {
    // etc...
});

== should not go multiline when it has a property ==
describe.only("testing this out with a long string", () => {
    // etc...
});

[expect]
describe.only("testing this out with a long string", () => {
    // etc...
});

== should not go multiline for an it ==
it("testing this out with a long string", () => {
    // etc...
});

[expect]
it("testing this out with a long string", () => {
    // etc...
});

== should not be hanging for template literal ==
it(`testing this out ${test} testing testing`, () => {
});

[expect]
it(`testing this out ${test} testing testing`, () => {
});

== should make multi-line when the arrow function expression is not on the same line (since doing this makes it not match the test library code) ==
it("testing this out with a long string",
() => {
    // etc...
});

[expect]
it(
    "testing this out with a long string",
    () => {
        // etc...
    },
);

== should not go multiline when going above line width for a test call expression ==
test("testing this out with a long string", () => {
    // etc...
});

[expect]
test("testing this out with a long string", () => {
    // etc...
});

== should not go multiline when going above line width for an x.test call expression ==
Deno.test("testing this out with a long string", () => {
    // etc...
});

[expect]
Deno.test("testing this out with a long string", () => {
    // etc...
});
