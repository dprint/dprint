~~ binaryExpression.operatorPosition: nextLine ~~
== should move the operator to the next line ==
1 + 2 * 6 // test
    + 4 + // not worth effort, people can move this comment back
    7 * 6 + 4
    + 5;

[expect]
1 + 2 * 6 // test
    + 4
    // not worth effort, people can move this comment back
    + 7 * 6 + 4
    + 5;

== should maintain the operator position when one of the multiplications go multi-line ==
1 + 2 * 6
    + 4 +
    7 * 6 * 30 * 40
        * 50
    + 5;

[expect]
1 + 2 * 6
    + 4
    + 7 * 6 * 30 * 40
        * 50
    + 5;

== should move the operator to the next line ==
1 && 2 || 6 // test
    && 4 || // not worth effort, people can move this comment back
    7 && 6 || 4
    && 5;

[expect]
1 && 2 || 6 // test
        && 4
    // not worth effort, people can move this comment back
    || 7 && 6 || 4
        && 5;

== should support comments before and after operator ==
testttttttt
    /*1*/ && /*2*/ tttttttttt;

[expect]
testttttttt
    /*1*/ && /*2*/ tttttttttt;

== should indent equality check when multi-line ==
const t = this.context.currentGroup &&
    this.context.currentGroup.name
        !== test;

[expect]
const t = this.context.currentGroup
    && this.context.currentGroup.name
        !== test;
