~~ lineWidth: 50 ~~
== should format when only having a module specifier ==
import    "test"  ;

[expect]
import "test";

== should format when using a default and namespace import ==
import
    myVar,
    *   as   nameSpace   from    'test'  ;

[expect]
import myVar, * as nameSpace from "test";

== should format when using a default and named imports ==
import
    myVar,
    { n1, n2, n3
}   from    "test"  ;

[expect]
import myVar, { n1, n2, n3 } from "test";

== should format when using a default import ==
import
    myVar   from    "test"  ;

[expect]
import myVar from "test";

== should format when using a namespace import ==
import
    *     as   nameSpace   from    "test"  ;

[expect]
import * as nameSpace from "test";

== should format when using named imports ==
import {n1,n2,n3} from    "test"  ;

[expect]
import { n1, n2, n3 } from "test";

== should format a type only import ==
import   type   { n1 } from "test";

[expect]
import type { n1 } from "test";

== should format when has zero named imports ==
import {} from "test";

[expect]
import {} from "test";

== should format when has zero named imports and is type-only import ==
import type {} from "test";

[expect]
import type {} from "test";

== should remain single line when has no named imports and exceeding the line width ==
import {} from "testingtttttttttttttttttttttttttttttt";

[expect]
import {} from "testingtttttttttttttttttttttttttttttt";

== should remain single line when has one named import and exceeding the line width ==
import { testingThisOut } from "testingtttttttttttttttttttttttttttttt";

[expect]
import { testingThisOut } from "testingtttttttttttttttttttttttttttttt";

== should remain single line when has one named import with alias and exceeding the line width ==
import { testingThisOut as alias } from "testingtttttttttttttttttttttttttttttt";

[expect]
import { testingThisOut as alias } from "testingtttttttttttttttttttttttttttttt";

== should not be single line when has two named imports and exceeding the line width ==
import { testingThisOut, test } from "testingtttttttttttttttttttttttttttttt";

[expect]
import {
    testingThisOut,
    test,
} from "testingtttttttttttttttttttttttttttttt";
