~~ lineWidth: 40 ~~
== should print ==
for (const t    of   test) {
    a;
    b;
}

[expect]
for (const t of test) {
    a;
    b;
}

== should become multi-line when exceeding width ==
for (const testingThis of outALittleBit) {
    a;
    b;
}

[expect]
for (
    const testingThis of outALittleBit
) {
    a;
    b;
}

== should become multi-line when exceeding width twice ==
for (const testingThis of outALittleBittttt) {
    a;
    b;
}

[expect]
for (
    const testingThis
        of outALittleBittttt
) {
    a;
    b;
}

== should format with the await keyword ==
for await (const t of test) {
}

[expect]
for await (const t of test) {
}

== should print a nested variable declaration with semi-colon ==
for (const t of test) {
    const u = 5;
}

[expect]
for (const t of test) {
    const u = 5;
}

== should print the inner header on next line when the open paren is on a different line ==
for (
const t of test) {
}

[expect]
for (
    const t of test
) {
}

== should print empty on same line when on same line ==
for (const t of test) {}

[expect]
for (const t of test) {}

== should print empty on different line when on different line ==
for (const t of test) {
}

[expect]
for (const t of test) {
}

== should print when only has an empty statement ==
for (const t of test);

[expect]
for (const t of test);

== should print when only has an empty statement on next line ==
for (const t of test)
    ;

[expect]
for (const t of test);
