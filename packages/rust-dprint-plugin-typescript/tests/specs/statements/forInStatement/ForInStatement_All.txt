~~ lineWidth: 40 ~~
== should print ==
for (const t    in   test) {
    a;
    b;
}

[expect]
for (const t in test) {
    a;
    b;
}

== should become multi-line when exceeding width ==
for (const testingThis in outALittleBit) {
    a;
    b;
}

[expect]
for (
    const testingThis in outALittleBit
) {
    a;
    b;
}

== should become multi-line when exceeding width twice ==
for (const testingThis in outALittleBittttt) {
    a;
    b;
}

[expect]
for (
    const testingThis
        in outALittleBittttt
) {
    a;
    b;
}

== should print a nested variable declaration with a semi-colon ==
for (const t in test) {
    const u = 5;
}

[expect]
for (const t in test) {
    const u = 5;
}

== should print the inner header on next line when the open paren is on a different line ==
for (
const t in test) {
}

[expect]
for (
    const t in test
) {
}

== should print empty on same line when on same line ==
for (const t in test) {}

[expect]
for (const t in test) {}

== should print empty on different line when on different line ==
for (const t in test) {
}

[expect]
for (const t in test) {
}

== should print when only has an empty statement ==
for (const t in test);

[expect]
for (const t in test);

== should print when only has an empty statement on next line ==
for (const t in test)
    ;

[expect]
for (const t in test);
